#version 450
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(set = 0, binding = 0) uniform EmptyMaterialParams
{
	float padding;
} materialParams;

layout(set = 1, binding = 0) uniform EmptyObjectParams
{
	float padding;
} objectParams;

layout(set = 2, binding = 0, rgba8) uniform writeonly image3D voxelMipMapAlbedoBase_IN[6];
layout(set = 2, binding = 1) uniform sampler3D voxelRadiance_IN;

layout(set = 2, binding = 2) uniform VoxelParams
{
    vec3 worldMinPoint;
    float voxelSize;
    float voxelDimension;
} params;

const ivec3 anisoOffsets[] = ivec3[8]
(
	ivec3(1, 1, 1),
	ivec3(1, 1, 0),
	ivec3(1, 0, 1),
	ivec3(1, 0, 0),
	ivec3(0, 1, 1),
	ivec3(0, 1, 0),
	ivec3(0, 0, 1),
	ivec3(0, 0, 0)
);

void FetchTexels(ivec3 pos, inout vec4 val) 
{
    val = texelFetch(voxelRadiance_IN, pos, 0);
} 

void main()
{	
    if(gl_GlobalInvocationID.x >= params.voxelDimension || 
       gl_GlobalInvocationID.y >= params.voxelDimension ||
       gl_GlobalInvocationID.z >= params.voxelDimension) 
        return;
    ivec3 writePos = ivec3(gl_GlobalInvocationID);
    vec4 value;
    FetchTexels(writePos, value);
    imageStore(voxelMipMapAlbedoBase_IN[0], writePos, value);
    imageStore(voxelMipMapAlbedoBase_IN[1], writePos, value);
    imageStore(voxelMipMapAlbedoBase_IN[2], writePos, value);
    imageStore(voxelMipMapAlbedoBase_IN[3], writePos, value);
    imageStore(voxelMipMapAlbedoBase_IN[4], writePos, value);
    imageStore(voxelMipMapAlbedoBase_IN[5], writePos, value);
}