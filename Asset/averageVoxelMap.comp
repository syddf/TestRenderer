#version 450
#extension GL_ARB_shader_image_load_store : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(set = 0, binding = 0) uniform EmptyMaterialParams
{
	float padding;
} materialParams;

layout(set = 1, binding = 0) uniform EmptyObjectParams
{
	float padding;
} objectParams;

layout(set = 2, binding = 0, rgba8) uniform image3D voxelAlbedo_IN;
layout(set = 2, binding = 1, rgba8) uniform writeonly image3D voxelNormal_IN;
layout(set = 2, binding = 2, rgba8) uniform writeonly image3D voxelEmission_IN;
layout(set = 2, binding = 3, r8) uniform image3D staticVoxelFlag_IN;
layout(set = 2, binding = 4, r32ui) uniform uimage3D voxelAlbedo_rg_IN;
layout(set = 2, binding = 5, r32ui) uniform uimage3D voxelAlbedo_ba_IN;

vec2 ConvUintToVec2(uint value)
{
	uint x = (value >> 16) & 0xFFFF;
	uint y = value & 0xFFFF;
	return vec2(x / 255.0f, y / 255.0f);
}

void main()
{
	const float EPSILON = 1e-30;
	int dimension = imageSize(voxelAlbedo_IN).x;
	if(gl_GlobalInvocationID.x >= dimension || gl_GlobalInvocationID.y >= dimension || gl_GlobalInvocationID.z >= dimension)
		return;
	ivec3 writePos = ivec3(gl_GlobalInvocationID);
	//if(imageLoad(voxelAlbedo_IN, writePos).a < EPSILON)
	//	return;
	//if(imageLoad(staticVoxelFlag_IN, writePos).r > EPSILON)
	//	return;
	uint albedoRG = imageLoad(voxelAlbedo_rg_IN, writePos).r;
	uint albedoBA = imageLoad(voxelAlbedo_ba_IN, writePos).r;
	vec2 xy = ConvUintToVec2(albedoRG);
	vec2 zw = ConvUintToVec2(albedoBA);
	if(zw.y <= EPSILON) 
		return;
	vec4 albedo = vec4(xy.x / zw.y, xy.y / zw.y, zw.x / zw.y, 1.0f);
    	imageStore(voxelAlbedo_IN, writePos, albedo);
}